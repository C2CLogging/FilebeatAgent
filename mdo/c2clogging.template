################### Filebeat Configuration for C2Clogging ###################

#=========================== Filebeat prospectors =============================

filebeat.prospectors:

# Each - is a prospector. Most options can be set at the prospector level, so
# you can use different prospectors for various configurations.
# Below are the prospector specific configurations.

############# prospector for ODM logs (for ODM running on Liberty) #############
# change the path to point to your Liberty messages.log
# for example "/opt/IBM/wlp/usr/servers/odm8900/logs/messages.log"
#
# change ibm_userDir to the directory under which WAS instance is running
# for example ibm_userDir: "opt/IBM/wlp/usr/servers/odm8900"
#
# change ibm_ServerName to profile name of Liberty Server
# for example ibm_ServerName: "odm8900"
#
# change ibm_tags to type of ODM server
# for example ibm_tags: "IBM_ODM_Decision_Center"
#          or ibm_tags: "IBM_ODM_Decision_Server"
#
# if there are more than one instance of ODM on Liberty running on same host, copy,paste
# the following sections for each instance and change ibm_userDir, ibm_serverName, ibm_tags
# for each of them
#################################################################################

- input_type: log
  document_type: liberty_message_odm
  paths:
    - /opt/IBM/wlp/usr/servers/odm8900/logs/messages.log
  fields:
    ALCH_TENANT_ID: "ALCH_TENANT_ID_VALUE"
    DateFormat: "1/2/06 15:04:05.000 MST"
    TimestampField: "ibm_datetime_date"
    ibm_userDir: "<your_ODM_Liberty_instance_dir>"
    ibm_serverName: "<your_ODM_Liberty_Server_Name>"
    ibm_tags: "<your_ODM_Liberty_tag>"
    host: "host_value"
  fields_under_root: true
  exclude_lines: ['^$']
  multiline:
     pattern: ^\[
     negate: true
     match: after

############# prospector for ODM logs (for ODM running on WAS) ####################
# change the paths to point to your WAS SystemOut.log and WAS SystemErr.log
# for example /opt/IBM/WebSphere/AppServer/profiles/AppSrv01/logs/server1/SystemOut.log
#
# change ibm_userDir to the directory under which WAS instance is running
# for example ibm_userDir: /opt/IBM/WebSphere/AppServer/profiles/AppSrv01
#
# change was_ServerName to profile name of WAS Server
# for example ibm_ServerName: AppSrv01
#
# change ibm_ServerName to profile name of Liberty Server
# for example ibm_ServerName: "odm8900"
#
# change ibm_tags to type of ODM server
# for example ibm_tags: "IBM_ODM_Decision_Center"
#          or ibm_tags: "IBM_ODM_Decision_Server"
#
# if there are more than one instance of ODM on WAS running on same host, copy,paste
# the following sections for each instance and change ibm_userDir, ibm_serverName, ibm_tags
# for each of them
#################################################################################
- input_type: log
  document_type: twas_systemout_odm
  paths:
    - /opt/IBM/WebSphere/AppServer/profiles/AppSrv01/logs/server1/SystemOut.log

  multiline:
    pattern: ^\[
    negate: true
    match: after

  fields:
    ALCH_TENANT_ID: "ALCH_TENANT_ID_VALUE"
    ibm_userDir: "<your_ODM_WAS_instance_dir>"
    ibm_serverName: "<your_ODM_WAS_Server_Name>"
    ibm_tags: "<your_ODM_WAS_tag>"
    host: "host_value"
    DateFormat: "1/2/06 15:04:05:000 MST"
    TimestampField: "ibm_datetime_date"
  fields_under_root: true

- input_type: log
  document_type: twas_systemerr_odm
  paths:
    - /opt/IBM/WebSphere/AppServer/profiles/AppSrv01/logs/server1/SystemErr.log

  multiline:
    pattern: ^\[
    negate: true
    match: after

  fields:
    ALCH_TENANT_ID: "ALCH_TENANT_ID_VALUE"
    ibm_userDir: "<your_ODM_WAS_instance_dir>"
    ibm_serverName: "<your_ODM_WAS_Server_Name>"
    ibm_tags: "<your_ODM_WAS_tag>"
    host: "host_value"
    DateFormat: "1/2/06 15:04:05:000 MST"
    TimestampField: "ibm_datetime_date"
  fields_under_root: true

###########################################################################################
# processors define processing to be performed on each type of logs before they are
# sent to their end point
# grok pattern can be specified under grok condition directly or in a file present
# under grokpatterns folder
###########################################################################################

processors:
 - drop_fields:
     when:
        and:
          - equals:
              type: liberty_message_odm
          - grok:
              message: "%{LIBERTYMESSAGE}"
          - grok:
              message: "%{ODMMESSAGE}"
          - grok:
              message: "%{ODMMESSAGERULESET}"
     fields: ["beat","offset","DateFormat","TimestampField"]
 - drop_fields:
     when:
        and:
          - equals:
              type: twas_systemout_odm
          - grok:
              message: "%{WASSYSOUT}"
          - grok:
              message: "%{ODMMESSAGE}"
          - grok:
              message: "%{ODMMESSAGERULESET}"
     fields: ["beat","offset","DateFormat","TimestampField"]

 - drop_fields:
     when:
        and:
          - equals:
              type: twas_systemerr_odm
          - grok:
              message: "%{WASSYSOUT}"
          - grok:
              message: "%{ODMMESSAGE}"
          - grok:
              message: "%{ODMMESSAGERULESET}"
     fields: ["beat","offset","DateFormat","TimestampField"]


############################# Output ##########################################

# Configure what outputs to use when sending the data collected by the beat.
# Multiple outputs may be used.

#----------------------------- Logstash output ---------------------------------
#output.logstash:
  # Boolean flag to enable or disable the output module.
  #enabled: true

  # The Logstash hosts
  #hosts: ["localhost:5044"]


#----------------------------- Logmet output ---------------------------------
output.logmet:
  # Boolean flag to enable or disable the output module.
  enabled: true

  # The Logstash hosts
  hosts: ["logmet_value:9091"]

  # Enable SSL support. SSL is automatically enabled, if any SSL setting is set.
  ssl.enabled: true

  # Certificate for SSL client authentication
  ssl.certificate: "certificate_value"

  # Client Certificate Key
  ssl.key: "certificate_key_value"

  # Spaceid
  ssl.space_id: "ALCH_TENANT_ID_VALUE"

  #Logging token
  ssl.logging_token: "logging_token_value"


############################# Logging #########################################

# There are three options for the log ouput: syslog, file, stderr.
# Under Windos systems, the log files are per default sent to the file output,
# under all other system per default to syslog.
logging:

  # Send all logging output to syslog. On Windows default is false, otherwise
  # default is true.
  to_syslog: false

  # Write all logging output to files. Beats automatically rotate files if rotateeverybytes
  # limit is reached.
  to_files: true

  # To enable logging to files, to_files option has to be set to true
  files:
    # The directory where the log files will written to.
    path: log_path_value

    # The name of the files where the logs are written to.
    name: filebeat.log

    # Configure log file size limit. If limit is reached, log file will be
    # automatically rotated
    rotateeverybytes: 10485760 # = 10MB

    # Number of rotated log files to keep. Oldest files will be deleted first.
    #keepfiles: 7

  # Enable debug output for selected components. To enable all selectors use ["*"]
  # Other available selectors are beat, publish, service
  # Multiple selectors can be chained.
  #selectors: [ ]

  # Sets log level. The default log level is error.
  # Available log levels are: critical, error, warning, info, debug
  level: info


